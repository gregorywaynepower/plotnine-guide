---
title: "Geometric objects"
jupyter: python3
ipynb-shell-interactivity: all
---

```{python}
from plotnine import *
from plotnine.data import mpg
```

Key Points:

* Geoms use aesthetic mappings to draw plot elements.
* Individual geoms draw one observation (row) with one element.
* Collective geoms draw multiple observations (rows) with one element (e.g. a boxplot).
* Collective geoms include lines, which are drawn between observations.
* Use the `position=` argument to adjust the position of overlapping elements.
* Use the `stat=` argument to run calculations before plotting.


## Basic use

```{python}
#| layout-nrow: 1
(
    ggplot(mpg, aes("displ", "hwy"))
    + geom_point(aes(fill="class"), size=5)
    + geom_point(aes(shape="class"))
)
```

* Geoms drawn in order
* Manual mappings
* Legend might have guides for multiple geoms

## Kinds of geoms

Geoms come in two varieties:

* Individual geoms: draw each row of data independently on the chart.
* Collective geoms: draw based on groups of rows, or relationships between them.

```{python}
#| echo: false
#| layout-nrow: 1
small_mpg = (
    mpg[mpg["class"].isin(["2seater", "compact", "midsize"])]
    .assign(**{"class": lambda d: d["class"].cat.remove_unused_categories()})
)
model_avg_hwy = (
    small_mpg
    .groupby(["year", "class"])["hwy"]
    .agg("mean")
    .reset_index()
)

big_text = theme_grey(base_size=24)

p1 = ggplot(small_mpg, aes("class", "hwy")) + geom_boxplot() + labs(title="collective: boxplot") + big_text
p2 = ggplot(small_mpg, aes("class", "hwy")) + geom_point(position = position_jitter(height=0, width=0.1)) + labs(title="individual: point") + big_text
p3 = (
    ggplot(model_avg_hwy, aes("year", "hwy", color="class", group="class")) 
    + geom_line(size=1)
    + geom_point()
    + labs(title = "collective: line")
    + big_text
    + theme(legend_position="bottom")
    + scale_color_discrete(drop=True)
)

p2
p1
p3
```



## Individual: points, bars, and text

### Scatterplot with text

```{python}
highest_mpg = mpg[(mpg["hwy"] == mpg["hwy"].max()) & (mpg["cty"] == mpg["cty"].max())]

(
    ggplot(mpg, aes("cty", "hwy")) 
    + geom_point() 
    + geom_text(
        aes(label="model"),
        nudge_y=-2,
        nudge_x = -1,
        data = highest_mpg
    )
)
```

### Barchart on counts

```{python}
ttl_mpg_class = mpg.value_counts(["class", "drv"]).reset_index()
ttl_mpg_class.head(3)
```

```{python}
ggplot(ttl_mpg_class, aes("class", "count", fill = "drv")) + geom_col()
```

### Rect


## Collective: distributions

collective:

* smooth
* histogram
* density
* boxplots
* combined (e.g. boxplots and lines)

### Boxplots and violins

```{python}
p = ggplot(mpg, aes("class", "cty"))

p + geom_boxplot()
p + geom_violin()
```

### Histograms and densities

```{python}
p = ggplot(mpg, aes("cty"))
p + geom_histogram()
p + geom_density(fill="lightblue")
```

### Smoothing

```{python}
(
    ggplot(mpg, aes("displ", "hwy"))
    + geom_point()
    + geom_smooth(method="lm", color="blue", fill="orange")
)

```

## Collective: lines and fills

```{python}
from plotnine import *
from plotnine.data import huron

(
    ggplot(huron, aes("year", "level"))
    + geom_line()
    + geom_point()
)
```

* TODO: use economics data to show with color?

```{python}
from plotnine import *
from plotnine.data import huron

(
    ggplot(huron, aes("year", "level"))
    + geom_ribbon(aes(ymax="level"), ymin=0, fill="lightblue")
    + geom_point()
)
```

* mention geom_area

## `position=` for placement tweaks

### Jitter with random noise

```{python}
#| layout-nrow: 1
p = ggplot(mpg, aes("cty", "hwy"))

p + geom_point(alpha=.2)
p + geom_point(position=position_jitter())
```

### Dodge to side-by-side

```{python}
ttl_class_drv = (
    mpg.groupby(["class", "drv"], observed=False)
    .size()
    .rename("n")
    .reset_index()
)

ttl_class_drv.head()
```

```{python}
#| layout-nrow: 1
# TODO: can we find an example with fewer 0 counts? 
p = ggplot(ttl_class_drv, aes("class", y = "n", fill="drv"))

p + geom_col()
p + geom_col(position=position_dodge())
```


## `stat=` for statistical calculations


```{python}
(
    ggplot(mpg, aes("trans", "cty"))
    + geom_point()
    + geom_point(
        color="red",
        size=3,
        stat="summary",
        fun_y=lambda x: x.mean())
)

```
