{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Aesthetic specifications\n",
        "jupyter: python3\n",
        "ipynb-shell-interactivity: all\n",
        "---\n",
        "\n",
        "\n",
        "This document is a translation of https://ggplot2.tidyverse.org/articles/ggplot2-specs.html\n",
        "\n",
        "\n",
        "## Color and fill\n",
        "\n",
        "Almost every geom has either color, fill, or both. Colors and fills can be specified in the following ways:\n",
        "\n",
        "* A **name**, e.g., `\"red\"`. **TODO: how do you list colors?**. https://matplotlib.org/stable/gallery/color/named_colors.html#css-colors\n",
        "* An __rgb specification__, with a string of the form `\"#RRGGBB\"` where each of \n",
        "    the pairs `RR`, `GG`, `BB` consists of two hexadecimal digits giving a value \n",
        "    in the range `00` to `FF`\n",
        "\n",
        "    You can optionally make the color transparent by using the form \n",
        "    `\"#RRGGBBAA\"`.\n",
        "* A missing value (e.g. None, np.nan, pd.NA), for a completely transparent colour. \n",
        "  - https://github.com/has2k1/plotnine/issues/791\n",
        "\n",
        "\n",
        "TODO: continuous colormaps -- https://matplotlib.org/stable/users/explain/colors/colormaps.html\n",
        "\n",
        "## Lines\n",
        "\n",
        "As well as `colour`, the appearance of a line is affected by `linewidth`, `linetype`, `linejoin` and `lineend`.\n",
        "\n",
        "### Line type {#sec:line-type-spec}\n",
        "\n",
        "Line types can be specified with:\n",
        "\n",
        "*   A __name__: solid, dashed, dotted, \n",
        "    dashdot, as shown below:\n"
      ],
      "id": "6c6308fd"
    },
    {
      "cell_type": "code",
      "metadata": {
        "md-indent": "    "
      },
      "source": [
        "#| fig-alt: \"A series of 6 horizontal lines with different line types.\n",
        "#|  From top-to-bottom they are titled 'solid', 'dashed', 'dotted',\n",
        "#|  'dotdash', 'longdash', 'twodash'.\"\n",
        "#| echo: false\n",
        "import pandas as pd\n",
        "from plotnine import *\n",
        "\n",
        "lty = [\n",
        "    \"solid\",\n",
        "    \"dashed\",\n",
        "    \"dotted\",\n",
        "    \"dashdot\",\n",
        "    ]\n",
        "linetypes = pd.DataFrame({\n",
        "  \"y\": list(range(len(lty))),\n",
        "  \"lty\": lty\n",
        "}) \n",
        "\n",
        "(ggplot(linetypes, aes(0, \"y\")) + \n",
        "  geom_segment(aes(xend = 5, yend = \"y\", linetype = \"lty\")) + \n",
        "  scale_linetype_identity() + \n",
        "  geom_text(aes(label = \"lty\"), nudge_y = 0.2) +\n",
        "  scale_x_continuous(name=None, breaks = None) + \n",
        "  scale_y_reverse(name=None, breaks = None)\n",
        ")"
      ],
      "id": "3ea3b1e8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* The lengths of on/off stretches of line. This is done with a string \n",
        "  containing 2, 4, 6, or 8 hexadecimal digits which give the lengths of\n",
        "  consecutive lengths. For example, the string `\"33\"` specifies three units \n",
        "  on followed by three off and `\"3313\"` specifies three units on followed by \n",
        "  three off followed by one on and finally three off. TODO: this likely isn't implemented? (but tuple syntax is `(0, (1, 5))`)"
      ],
      "id": "28876121"
    },
    {
      "cell_type": "code",
      "metadata": {
        "md-indent": "    "
      },
      "source": [
        "#| fig-alt: \n",
        "#|   A series of 9 horizontal lines with different line types.\n",
        "#|   Each line is titled by two hexadecimal digits that determined the\n",
        "#|   lengths of dashes and gaps.\"\n",
        "#| echo: false\n",
        "#| eval: false\n",
        "lty = [\"11\", \"18\", \"1f\", \"81\", \"88\", \"8f\", \"f1\", \"f8\", \"ff\"]\n",
        "linetypes = pd.DataFrame({\n",
        "  \"y\": list(range(len(lty))),\n",
        "  \"lty\": lty\n",
        "}) \n",
        "\n",
        "(\n",
        "    ggplot(linetypes, aes(0, \"y\")) + \n",
        "    geom_segment(aes(xend = 5, yend = \"y\", linetype = \"lty\")) + \n",
        "    scale_linetype_identity() + \n",
        "    # TODO: no hjust argument?\n",
        "    geom_text(aes(label = \"lty\"), nudge_y = 0.2) +\n",
        "    scale_x_continuous(name=None, breaks = None) + \n",
        "    scale_y_reverse(name=None, breaks = None)\n",
        ")"
      ],
      "id": "f3a0d8bf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The five standard dash-dot line types described above correspond to 44, 13, 1343, 73, and 2262.\n",
        "\n",
        "### Linewidth\n",
        "\n",
        "\n",
        "Due to a historical error, the unit of linewidth is roughly 0.75 mm. Making it \n",
        "exactly 1 mm would change a very large number of existing plots, so we're stuck \n",
        "with this mistake.\n",
        "\n",
        "### Line end/join parameters\n",
        "\n",
        "*   The appearance of the line end is controlled by the `lineend` paramter,\n",
        "    and can be one of \"round\", \"butt\" (the default), or \"square\".\n"
      ],
      "id": "68db7087"
    },
    {
      "cell_type": "code",
      "metadata": {
        "md-indent": "    "
      },
      "source": [
        "#| fig-alt: [\n",
        "#| \"A plot showing a line with an angle. A thinner red line is placed over\n",
        "#|  a thicker black line. The black line ends where the red line ends.\",\n",
        "#| \"A plot showing a line with an angle. A thinner red line is placed over\n",
        "#|  a thicker black line. The black line ends past where the red line ends,\n",
        "#|  and ends in a semicircle.\",\n",
        "#| \"A plot showing a line with an angle. A thinner red line is placed over\n",
        "#|  a thicker black line. The black line ends past where the red line ends,\n",
        "#|  and ends in a square shape.\"\n",
        "#| ]\n",
        "#| layout-nrow: 1\n",
        "df = pd.DataFrame({\"x\": [1,2,3], \"y\": [4, 1, 9]})\n",
        "base = ggplot(df, aes(\"x\", \"y\")) + xlim(0.5, 3.5) + ylim(0, 10)\n",
        "(\n",
        "  base + \n",
        "  geom_path(size = 10) + \n",
        "  geom_path(size = 1, colour = \"red\")\n",
        ")\n",
        "\n",
        "(\n",
        "  base + \n",
        "  geom_path(size = 10, lineend = \"round\") + \n",
        "  geom_path(size = 1, colour = \"red\")\n",
        ")\n",
        "\n",
        "(\n",
        "  base + \n",
        "  geom_path(size = 10, lineend = \"square\") + \n",
        "  geom_path(size = 1, colour = \"red\")\n",
        ")"
      ],
      "id": "bab2e6dc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "*   The appearance of line joins is controlled by `linejoin` and can be one of \n",
        "    \"round\" (the default), \"mitre\", or \"bevel\".\n"
      ],
      "id": "a966e42e"
    },
    {
      "cell_type": "code",
      "metadata": {
        "md-indent": "    "
      },
      "source": [
        "#| layout-nrow: 1\n",
        "#| fig-alt: [\n",
        "#|   \"A plot showing a thin red line on top of a thick black line shaped like   the letter 'V'. The corner in the black V-shape is rounded.\",\n",
        "#|   \"A plot showing a thin red line on top of a thick black line shaped like the letter 'V'. The corner in the black V-shape is sharp.\",\n",
        "#|   \"A plot showing a thin red line on top of a thick black line shaped like the letter 'V'. A piece of the corner is cut off so that the two straight parts are connected by a horizontal part.\"\n",
        "#| ]\n",
        "df = pd.DataFrame({\"x\": [1,2,3], \"y\": [9, 1, 9]})\n",
        "base = ggplot(df, aes(\"x\", \"y\")) + ylim(0, 10)\n",
        "(\n",
        "  base + \n",
        "  geom_path(size = 10) + \n",
        "  geom_path(size = 1, colour = \"red\")\n",
        ")\n",
        "\n",
        "\n",
        "(\n",
        "  base + \n",
        "  geom_path(size = 10, linejoin = \"mitre\") + \n",
        "  geom_path(size = 1, colour = \"red\")\n",
        ")\n",
        "\n",
        "(\n",
        "  base + \n",
        "  geom_path(size = 10, linejoin = \"bevel\") + \n",
        "  geom_path(size = 1, colour = \"red\")\n",
        ")"
      ],
      "id": "84447ba2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Mitre joins are automatically converted to bevel joins whenever the angle is too small (which would create a very long bevel). This is controlled by the `linemitre` parameter which specifies the maximum ratio between the line width and the length of the mitre.\n",
        "\n",
        "\n",
        "## Polygons\n",
        "\n",
        "The border of the polygon is controlled by the `colour`, `linetype`, and `linewidth` aesthetics as described above. The inside is controlled by `fill`.\n",
        "\n",
        "## Point\n",
        "\n",
        "### Shape {#sec:shape-spec}\n",
        "\n",
        "Shapes take five types of values:\n",
        "\n",
        "*   A string for a point type, as specified in [matplotlib.markers](https://matplotlib.org/stable/api/markers_api.html#):\n"
      ],
      "id": "7d4ae861"
    },
    {
      "cell_type": "code",
      "metadata": {
        "md-indent": "    "
      },
      "source": [
        "#| echo: false\n",
        "#| fig-alt: \"A 5-by-5 grid of point symbols annotated by the numbers\n",
        "#|  that can be used to represent the symbols. From left to right, the\n",
        "#|  first 15 symbols are lines or open shapes, the next 5 symbols are solid \n",
        "#|  shapes and the last 5 symbols are filled shaped.\"\n",
        "\n",
        "shape_points = [\n",
        "    (\".\", \"point\"),\n",
        "    (\",\", \"pixel\"),\n",
        "    (\"o\", \"circle\"),\n",
        "    (\"v\", \"triangle_down\"),\n",
        "    (\"^\", \"triangle_up\"),\n",
        "    (\"<\", \"triangle_left\"),\n",
        "    (\">\", \"triangle_right\"),\n",
        "    (\"1\", \"tri_down\"),\n",
        "    (\"2\", \"tri_up\"),\n",
        "    (\"3\", \"tri_left\"),\n",
        "    (\"4\", \"tri_right\"),\n",
        "    (\"8\", \"octagon\"),\n",
        "    (\"s\", \"square\"),\n",
        "    (\"p\", \"pentagon\"),\n",
        "    (\"P\", \"plus (filled)\"),\n",
        "    (\"*\", \"star\"),\n",
        "    (\"h\", \"hexagon1\"),\n",
        "    (\"H\", \"hexagon2\"),\n",
        "    (\"+\", \"plus\"),\n",
        "    (\"x\", \"x\"),\n",
        "    (\"X\", \"x (filled)\"),\n",
        "    (\"D\", \"diamond\"),\n",
        "    (\"d\", \"thin_diamond\"),\n",
        "    (\"|\", \"vline\"),\n",
        "    (pd.NA, \"None\"),\n",
        "     #(\"_\", \"hline\"),\n",
        "    # TODO: how to use these?\n",
        "    #(0, \"tickleft\"),\n",
        "    #(1, \"tickright\"),\n",
        "    #(2, \"tickup\"),\n",
        "    #(3, \"tickdown\"),\n",
        "    #(4, \"caretleft\"),\n",
        "    #(5, \"caretright\"),\n",
        "    #(6, \"caretup\"),\n",
        "    #(7, \"caretdown\"),\n",
        "    #(8, \"caretleft (centered at base)\"),\n",
        "    #(9, \"caretright (centered at base)\"),\n",
        "    #(10, \"caretup (centered at base)\"),\n",
        "    #(11, \"caretdown (centered at base)\")\n",
        "]\n",
        "n_shapes = len(shape_points)\n",
        "shapes = pd.DataFrame({\n",
        "  \"shape\": [entry[0] for entry in shape_points],\n",
        "  \"x\": [x // 5 for x in range(n_shapes)],\n",
        "  \"y\": [-x % 5 for x in range(n_shapes)]\n",
        "})\n",
        "\n",
        "(\n",
        "  ggplot(shapes, aes(\"x\", \"y\")) + \n",
        "  geom_point(aes(shape = \"shape\"), size = 5, fill = \"red\") +\n",
        "  geom_text(aes(label = \"shape\"), nudge_x = 0.15) +\n",
        "  scale_shape_identity() +\n",
        "  expand_limits(x = 4.1) +\n",
        "  theme_void()\n",
        ")"
      ],
      "id": "1b754540",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "* `None` to draw nothing. (TODO: does not work)\n",
        "\n",
        "### Colour and fill\n",
        "\n",
        "While `colour` applies to all shapes, `fill` only applies to shapes with red fill in the plot above. The size of the filled part is controlled by `size`, the size of the stroke is controlled by `stroke`. Each is measured in mm, and the total size of the point is the sum of the two. Note that the size is constant along the diagonal in the following figure.\n"
      ],
      "id": "a173ab94"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-alt: \"A plot showing a 4-by-4 grid of red points, the top 12 points with\n",
        "#|  black outlines. The size of the points increases horizontally. The stroke of \n",
        "#|  the outlines of the points increases vertically. A white diagonal line with\n",
        "#|  a negative slope marks that the 'stroke' versus 'size' trade-off has \n",
        "#|  similar total sizes.\"\n",
        "sizes = (\n",
        "  pd.DataFrame({\"size\": [0, 2, 4, 6]})\n",
        "  .merge(\n",
        "    pd.DataFrame({\"stroke\": [0, 2, 4, 6]}), how=\"cross\"\n",
        "  )\n",
        ")\n",
        "\n",
        "(\n",
        "  ggplot(sizes, aes(\"size\", \"stroke\", size = \"size\", stroke = \"stroke\")) + \n",
        "  geom_abline(slope = -1, intercept = 6, colour = \"white\", size = 6) + \n",
        "  geom_point(shape = \"o\", fill = \"red\") +\n",
        "  scale_size_identity()\n",
        ")"
      ],
      "id": "f9237dec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Text\n",
        "\n",
        "### Font family\n",
        "\n",
        "There are only three fonts that are guaranteed to work everywhere: \"sans\" (the default), \"serif\", or \"mono\" (TODO: this doesn't work):\n"
      ],
      "id": "43f28a41"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-alt: \"A plot showing three text labels arranged vertically. The top \n",
        "#|  label is 'sans' and is displayed in a sans-serif font. The middle label is\n",
        "#|  'serif' and is displayed in a serif font. The bottom label is 'mono' and\n",
        "#|  is displayed in a monospaced font.\"\n",
        "\n",
        "\n",
        "# TODO: add cursive and 🧚‍♀️ fantasy  \n",
        "df = pd.DataFrame({\"x\": 1, \"y\": [3, 2, 1], \"family\": [\"sans-serif\", \"serif\", \"monospace\"]})\n",
        "\n",
        "(\n",
        "  ggplot(df, aes(\"x\", \"y\")) + \n",
        "  geom_text(aes(label = \"family\", family=\"family\"), size=20)\n",
        ")"
      ],
      "id": "f406896c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "You should be able to use any fonts installed on your system.\n",
        "TODO: find something to link out to for installing new fonts.\n",
        "\n",
        "* `showtext` makes GD-independent plots by rendering all text as polygons. (TODO: svg_usefont; trade-off, paths are hard to edit quickly vs fonts eg in inkscape)\n",
        "\n",
        "\n",
        "### Font face\n",
        "\n",
        "TODO: update plotnine and re-run; see geom_text docs\n"
      ],
      "id": "4759c684"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-alt: \"A plot showing four text labels arranged vertically. The top \n",
        "#|  label is 'bold.italic' and is displayed in bold and italic. The next three\n",
        "#|  labels are 'italic', 'bold' and 'plain' and are displayed in their \n",
        "#|  respective styles.\"\n",
        "df = pd.DataFrame({\"x\": [1, 2, 3, 4], \"fontweight\": [\"plain\", \"bold\", \"italic\", \"bold.italic\"]})\n",
        "\n",
        "(\n",
        "  ggplot(df, aes(1, \"x\")) + \n",
        "  geom_text(aes(label = \"fontweight\", fontweight = \"fontweight\"))\n",
        ")"
      ],
      "id": "916083f5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### Font size\n",
        "\n",
        "The `size` of text is measured in mm by default. This is unusual, but makes the size of text consistent with the size of lines and points. Typically you specify font size using points (or pt for short), where 1 pt = 0.35mm. In `geom_text()` and `geom_label()`, you can set `size.unit = \"pt\"` to use points instead of millimeters. In addition,\n",
        "ggplot2 provides a conversion factor as the variable `.pt`, so if you want to draw 12pt text, you can also set `size = 12 / .pt`.\n",
        "\n",
        "### Justification\n",
        "\n",
        "Horizontal and vertical justification have the same parameterisation, either a string (\"top\", \"middle\", \"bottom\", \"left\", \"center\", \"right\") or a number between 0 and 1:\n",
        "\n",
        "* top = 1, middle = 0.5, bottom = 0\n",
        "* left = 0, center = 0.5, right = 1\n"
      ],
      "id": "f66435d4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| fig-alt: \"A 3-by-3 grid of text on top of points, with horizontal text\n",
        "#|  justification increasing from 0 to 1 on the x-axis and vertical \n",
        "#|  justification increasing from 0 to 1 on the y-axis. The points make it\n",
        "#|  easier to see the relative placement of text.\"\n",
        "just = pd.DataFrame({\"hjust\": [\"center\", \"right\", \"left\"], \"x\": [0, 1, 2]}).merge(pd.DataFrame({\"vjust\": [\"center\", \"top\", \"bottom\"], \"y\": [0, 1, 2]}), how=\"cross\")\n",
        "\n",
        "just[\"label\"] = just[\"hjust\"].astype(str).str.cat(just[\"vjust\"].astype(str), sep=\", \")\n",
        "\n",
        "(\n",
        "  ggplot(just, aes(\"x\", \"y\")) +\n",
        "  geom_point(colour = \"grey\", size = 5) + \n",
        "  geom_text(aes(label = \"label\", hjust = \"hjust\", vjust = \"vjust\"))\n",
        "  + expand_limits(x = [-.5, 2.5], y = [-.5, 2.5])\n",
        ")"
      ],
      "id": "de82a9f8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Note that you can use numbers outside the range (0, 1), but it's not recommended. "
      ],
      "id": "8602d79e"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}